--- printer_ui-orig/printerui/qml/settings/SettingListener.qml
+++ printer_ui/printerui/qml/settings/SettingListener.qml
@@ -1,12 +1,80 @@
 import QtQuick 2.12
 import UIBase 1.0
 import Printer 1.0
+import X1PlusNative 1.0
 
 import "qrc:/uibase/qml/widgets"
 import ".."
+import "../X1Plus.js" as X1Plus
 
 Rectangle {
 
+    /* CFW: VNC */
+    
+    /* This is a weird place for this -- not in X1Plus.js -- because it
+     * depends on the binding behavior.  At some point there should be an
+     * X1Plus.Settings.on() that can be called from X1Plus.js, but today is
+     * not that day.  */
+    property var vncEnabled: X1Plus.Settings.get("vnc.enabled", false)
+    property var vncPassword: X1Plus.Settings.get("vnc.password", NetworkManager.lanAccessToken)
+
+    onVncEnabledChanged: {
+        console.log(`X1Plus: VNC is ${vncEnabled?'en':'dis'}abled`);
+        X1Plus._X1PlusNative.vncEnable(!!vncEnabled);
+    }
+    onVncPasswordChanged: {
+        if (vncPassword == "") {
+            console.log("X1Plus: VNC password is disabled entirely!");
+            X1Plus._X1PlusNative.vncPassword(0, "");
+        } else {
+            console.log("X1Plus: VNC password is set");
+            X1Plus._X1PlusNative.vncPassword(1, vncPassword);
+        }
+    }
+
+    /* CFW: updater */
+    
+    property var cfwVersions: ({})
+    property var modules: X1Plus.DDS.versions()
+    property var fwVersion: cfwVersions['ota'] && cfwVersions['ota']['version']
+    property var fwIsBusted: modules.some(m => {
+        if (m.name != 'ota' && m.name in cfwVersions && m.sn != "N/A") {
+            if (m.sw_ver.split("/")[0] != cfwVersions[m.name].version) {
+                console.log(`component ${m.name} has unexpected version ${m.sw_ver} (wanted ${cfwVersions[m.name].version})`);
+                return true;
+            }
+        }
+    })
+    property var fwDidKvetch: false
+    property var fwShouldKvetch: fwIsBusted && !fwDidKvetch
+    
+    function cfwOnCompleted() {
+        X1Plus.DDS.requestVersions();
+
+        // Later, we might want to take other interesting things out of
+        // info.json, like the build date and release notes -- or even
+        // render like a QR code for each version or something.  But for
+        // now, we just transplant in the cfwVersion.
+        var contents = X1Plus.loadJson("/opt/x1plus/etc/version.json");
+        if (contents) {
+            var otamodules = contents['base']['modules'];
+            otamodules['cfw']['version'] = contents['cfwVersion'];
+            otamodules['ota']['version'] = contents['base']['version'];
+            otamodules['rv1126']['version'] = contents['base']['ap'];
+            cfwVersions = otamodules;
+        }
+    }
+    
+    property var newX1pOtaAvailable: X1Plus.OTA.status()['ota_available']
+    property var newX1pOtaDidKvetch: false
+    property var newX1pOtaShouldKvetch: newX1pOtaAvailable && !newX1pOtaDidKvetch
+    onNewX1pOtaShouldKvetch: {
+        if (!updater.hasPendingNotify)
+            return
+        if (printIdle)
+            popupUpdate();
+    }
+
     /* Updater */
 
     id: settingListener
@@ -18,22 +86,77 @@
 
     property var updatePage
     property bool versionNotify
+    property bool overrideUpdater: false
 
     onUpdatingChanged: {
         console.log("onUpdatingChanged " + updating)
-        if (updating) {
-            updatePage = dialogStack.push("UpdatingPage.qml")
+        if (overrideUpdater) {
+            console.log("not displaying main update screen, because override is set");
         } else {
-            dialogStack.pop(updatePage)
-            dialogStack.pop()
-            updatePage = null
+            if (updating) {
+                updatePage = dialogStack.push("UpdatingPage.qml")
+            } else {
+                dialogStack.pop(updatePage)
+                dialogStack.pop()
+                updatePage = null
+            }
         }
     }
 
     function popupUpdate() {
-        if (!printIdle || !updater.hasPendingNotify || versionNotify)
+        if (!printIdle || (!updater.hasPendingNotify && !fwShouldKvetch && !newX1pOtaShouldKvetch) || versionNotify)
             return
         updater.clearPendingNotify()
+
+        if (newX1pOtaShouldKvetch) {
+            newX1pOtaDidKvetch = true;
+            
+            versionNotify = true;
+            dialogStack.popupDialog(
+                "TextConfirm", {
+                    name: "X1Plus OTA notify",
+                    type: TextConfirm.YES_NO,
+                    text: qsTr("A new version of X1Plus is available!<br><br>Would you like to go to the update page?"),
+                    callback: function(index) {
+                        if (index === TextConfirm.CONFIRM) {
+                            screen.jumpTo("Settings/Device")
+                            pageStack.push("VersionPage.qml")
+                        }
+                        versionNotify = false;
+                    }
+                });
+            return;
+        }
+        
+        /* CFW should pop up the gentle warning. */
+        if (fwShouldKvetch && !(updater.consistency || updater.forceUpgrade)) {
+            // Only kvetch once per boot, when it is an appropriate time to
+            // do so.  If the user says no, then I guess it's on them.
+            fwDidKvetch = true;
+            
+            versionNotify = true;
+            dialogStack.popupDialog(
+                "TextConfirm", {
+                    name: "X1Plus version notify",
+                    type: TextConfirm.YES_NO,
+                    text: qsTr("The firmware versions on the printer's peripheral boards do not match the recommended versions for this X1Plus installation.  Printing may not be reliable, and some features may not be available.<br><br>Would you like to go to the update page?"),
+                    callback: function(index) {
+                        if (index === TextConfirm.CONFIRM) {
+                            screen.jumpTo("Settings/Device")
+                            pageStack.push("VersionPage.qml")
+                        }
+                        versionNotify = false;
+                    }
+                });
+        }
+
+        /* In CFW land, we do not emit the 'a new firmware update has been
+         * detected' message.  We're running 99.00.00.00, and that's always
+         * wrong, according to `upgrade`!  */
+        if (!updater.consistency && !updater.forceUpgrade) {
+            return;
+        }
+        
         var msg = updater.consistency
                 ? qsTr("The firmware version is abnormal. Repairing and updating are required, or printing cannot be started. Do you want to update now? You can also update later from \"Settings > General > Version\".")
                 : updater.forceUpgrade
@@ -53,12 +176,8 @@
                         // finished: Qt.binding(function() { return settingListener.printIdle }),
                         callback: function(index) {
                             if (index === TextConfirm.CONFIRM) {
-                                if (updater.consistency) {
-                                    DeviceManager.startUpdate(true)
-                                } else {
-                                    screen.jumpTo("Settings/Device")
-                                    pageStack.push("VersionPage.qml")
-                                }
+                                screen.jumpTo("Settings/Device")
+                                pageStack.push("VersionPage.qml")
                             }
                             versionNotify = false
                         }
@@ -98,6 +217,7 @@
     property var power: DeviceManager.power
     property bool sleep: power.hasSleep
     property bool aboutToSleep: power.aboutToSleep
+    property bool printing: PrintManager.currentTask.stage >= PrintTask.WORKING
 
     anchors.fill: parent
     color: sleep ? (blackColor ? Colors.gray_800 : "#EFEFEF") : "#80000000"
@@ -165,7 +285,7 @@
             blackColor = !blackColor
         }
     }
-
+    
     Connections {
         target: DeviceManager
         ignoreUnknownSignals: false
@@ -206,7 +326,8 @@
                             if(index === TextConfirm.YES) {
                                 screen.jumpTo("Settings/Maintenance")
                             }
-                        }
+                        },
+                        image: "../../icon/joel.png"
                     })
     }
 
@@ -219,14 +340,14 @@
             }
         }
     }
-
+    
     /* Region */
-
     Component.onCompleted: {
         var wifiRegion = DeviceManager.getSetting("environment", "")
         var region = DeviceManager.cloud.region
         if ((region == "" || (wifiRegion == "CN" && region != "China")) && (DeviceManager.getSetting("wizard") === true)) {
             dialogStack.push("ForceRegionPage.qml", { source: "force" })
         }
+        cfwOnCompleted();
     }
 }
