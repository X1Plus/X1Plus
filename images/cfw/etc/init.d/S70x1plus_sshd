#!/bin/bash

# X1 Plus SSH
CONFIG_DIR="/config/sshd"
HOST_KEYFILE="${CONFIG_DIR}/dropbear_ecdsa_host_key"
PIDFILE="/var/run/x1plus_sshd.pid"

update_rootpw() {
  # TODO: Migrate to x1p_get_setting once bbl_screen moves over to settings.json
  ROOT_PW=$(jq -r '.cfw_rootpw' /config/screen/printer.json)
  # Nothing has been generated, so default to device pass
  if [ "${ROOT_PW}" == "null" ]; then
    # Make sure we work with RPMB migrated systems
    if [ ! -f "/config/keys/PUSK" ]; then
      # We need a newline, thus this mess
      ROOT_PW=$(echo $(/usr/bin/bbl_showpwd 11 2> /dev/null))
    else
      ROOT_PW=$(cat /config/keys/PUSK | base64)
    fi
  fi
  echo -e "${ROOT_PW}\n${ROOT_PW}\n" | passwd root
}

start() {
  # Get our flag
  # TODO: Migrate to x1p_get_setting once bbl_screen moves over to settings.json
  SSH_START_FLAG=$(jq -r '.cfw_sshd' /config/screen/printer.json)
  if [ "${SSH_START_FLAG}" == "null" ]; then
    SSH_START_FLAG="false" # Default disable SSH
  fi
  # We only want to start if enabled
  if [ "${SSH_START_FLAG}" == "false" ]; then
    echo "x1plus sshd is disabled, exiting."
    exit 0
  fi
  printf "Starting x1plus sshd: "
  # Ensure host key exists
  if [ ! -f "${HOST_KEYFILE}" ]; then
    mkdir -p "${CONFIG_DIR}"
    dropbearkey -t ecdsa -f ${HOST_KEYFILE}
  fi
  # Always set our PW as needed
  update_rootpw
  # Start our daemon
  start-stop-daemon -S -m -b -p "${PIDFILE}" --exec dropbear -- -r "${HOST_KEYFILE}" -F -p 22
  [ $? = 0 ] && echo "OK" || echo "FAIL"
}

stop() {
  printf "Stopping x1plus sshd: "
  start-stop-daemon -K -q -p "${PIDFILE}"
  [ $? = 0 ] && echo "OK" || echo "FAIL"
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart|reload)
    stop
    start
    ;;
  new_password)
    update_rootpw
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|new_password}"
    exit 1
    ;;
esac

exit $?
