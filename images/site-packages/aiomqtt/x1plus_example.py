import x1plus.utils
import asyncio
import aiomqtt 
import json
import ssl
import os

#usage of aiomqtt outside of x1plusd - example
#pub(): publishes gcode_line command that toggles fan speed
#sub(): subscribes to wildcard topic /device/#

def write_flag(val):
	with open('/tmp/gcode_flag', 'w') as file:
		file.write(val)

def check_flag():
    if os.path.exists('/tmp/gcode_flag'):
        with open('/tmp/gcode_flag', 'r') as file:
            flag = file.read()
            return flag
    return None

def make_payload():
    speed = check_flag()
    speed = '255' if speed == '0' else '0' if speed == '255' else '0'
    write_flag(speed)
    return json.dumps({
        "print": {
            "command": "gcode_line",
            "sequence_id": 0,
            "param": f"M106 P1 S{speed}"
        }
    })

async def sub():
    try:
        async with aiomqtt.Client(
            '127.0.0.1', 
            8883,
            username='bblp', 
            password=x1plus.utils.access_code(), 
            tls_context=ssl.create_default_context(cafile='/usr/etc/system/certs/ssl-ca-bbl.pem'), 
            tls_insecure=True
        ) as client:
            await client.subscribe("device/#")
            
            async for message in client.messages:
                topic = message.topic.value
                msg = message.payload.decode("utf-8")
                print(f"{topic}\n{msg}")
            
    except Exception as e:
        print(f"Error subscribing: {e}")

async def pub():
    try:
        async with aiomqtt.Client(
            '127.0.0.1', 
            8883,
            username='bblp', 
            password=x1plus.utils.access_code(), 
            tls_context=ssl.create_default_context(cafile='/usr/etc/system/certs/ssl-ca-bbl.pem'), 
            tls_insecure=True
        ) as client:
            payload = make_payload()
            if payload:
                await client.publish(f"device/{x1plus.utils.serial_number()}/request", payload)
    except Exception as e:
        print(f"Error publishing MQTT: {e}")


asyncio.run(pub())

